var log = 0;
var userJson = [{
  "username" : "Farmer",
   "password" : "Password1"
},
{
  "username" : "Consumer ",
   "password" : "Password1"
}
]
$('document').ready(function(){
  $('#signupform div').each(function(){
     $(this).find('input').attr('disabled','true')
  })
  $('#home').hide();
  $('#signup').hide();
  $('#cart_items').hide();
  $('#navul').hide();
   

    $('#loginButton').click(function(){

      $('#home').show();
      $('#login').hide();
      $('#navul').show();
	  
	  /*
	  // Call get crops services
	  var settings = {
               "async": true,
               "crossDomain": true,
               "url": "http://localhost:5000/api/v1/seasons/allcrops",
               "method": "POST",
               "headers": { 
                 "content-type": "application/json",
                 "authorization": "Basic VFNXYXJlaG91c2U6UGFzc3dvcmQxMjM=",
                 "cache-control": "no-cache",
               },
               "data": ""
             }

             $.ajax(settings).done(function (response) {
               console.log(response);
               if (response.message == "SUCCESS"){
                 console.log(response);
               }
             });
	  
    /*  for (var i=0;i<userJson.length;i++){
      if ($('#username').val() == userJson[i].username && $('#password').val() == userJson[i].password){
        log=1;
        break;
      }
    }
    if (log == 0){
      alert("You have entered wrong username or password");
    }
    else{
      $('#home').show();
      $('#login').hide();
      $('#navul').show();

    }*/
  }); // End -- login

// when register button on login page is clicked
  $('#registerButton').click(function(){
    $('#signup').show();
    $('#login').hide();

  }); // End -- registerButton

  // on  changing user , it will add or remove the necessary/unnecessary fields
  $('#slectUser').on('change',function(){
         var user = $('#slectUser option:selected').val();

             switch(user){
               case "farmer":

               case "government":
               case "consumer":

             }
  })
  
  $("#addSeason").click(function(){
	  alert('button clicked');
	   var inputJSON = {"season" :{
		"name" : "Season Jun17-Oct17",
		"hashkey" : "SOMETHING", 
		"startDate" : "2017-05-14 15:50:44", 
		crops : [ 
			{
			"storageHashkey" : "SOMETHING", 
			"name" : "small corn",
			"pType": "corn", 
			"startDate" : "2017-06-05 00:00:00",
			"endTime": "2017-10-10 12:00:00",
			"quantity ": 250, 
			"unitPrice": "1200INR",
			"unit" : "100KG",
			"log" : [],
			"seeder" : "62da7c15-74f4-4819-9dfe-58c4076c8e52", 
			"status":"created",
			},
			{
			"storageHashkey" : "SOMETHING", 
			"name" : "Moong Dal",
			"pType": "dal", 
			"startDate" : "2017-06-05 00:00:00",
			"endTime": "2017-10-10 12:00:00",
			"quantity ": 10, 
			"unitPrice": "4200INR",
			"unit" : "100KG",
			"log" : [],
			"seeder" : "62da7c15-74f4-4819-9dfe-58c4076c8e52", 
			"status":"created",
			}
		],
			'producerID':'xyz',
		"status":"cretaed",
	   }};
		alert("initializing contract");
		
		var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545")); 
	
var code = "" +    "";

	var abi = [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_a",
          "type": "string"
        },
        {
          "name": "_b",
          "type": "string"
        }
      ],
      "name": "compare",
      "outputs": [
        {
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "getTotItems",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "hashkey",
          "type": "string"
        },
        {
          "name": "pname",
          "type": "string"
        },
        {
          "name": "protype",
          "type": "string"
        },
        {
          "name": "sdate",
          "type": "string"
        },
        {
          "name": "eTime",
          "type": "string"
        },
        {
          "name": "qty",
          "type": "uint256"
        },
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerNewCrop",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "hashkey",
          "type": "string"
        },
        {
          "name": "log",
          "type": "string"
        }
      ],
      "name": "logWork",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "hashkey",
          "type": "string"
        },
        {
          "name": "pname",
          "type": "string"
        },
        {
          "name": "protype",
          "type": "string"
        },
        {
          "name": "sdate",
          "type": "string"
        },
        {
          "name": "eTime",
          "type": "string"
        },
        {
          "name": "qty",
          "type": "uint256"
        },
        {
          "name": "unitPrice",
          "type": "uint256"
        },
        {
          "name": "unit",
          "type": "string"
        },
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "amount",
          "type": "uint256"
        },
        {
          "name": "status",
          "type": "string"
        }
      ],
      "name": "updateCropInfo",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "hashkey",
          "type": "string"
        }
      ],
      "name": "verifyCrop",
      "outputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "type": "constructor"
    }
  ];
    var myContract;
		// let's assume that coinbase is our account
        web3.eth.defaultAccount = web3.eth.coinbase;
		alert(web3.eth.defaultAccount);
        // create contract
        alert("transaction sent, waiting for confirmation");
        web3.eth.contract(abi).new({data: code, gas:4700000}, function (err, contract) {
            if (err) {
                console.error(err);
                return;

            // callback fires twice, we only want the second call when the contract is deployed
            } else if(contract.address){

                myContract = contract;
                console.log('address: ' + myContract.address);
				alert('Done and mined');
				// call the contract
				seasons = inputJSON["season"];
				var res = myContract.registerNewCrop(seasons["storageHashkey"], seasons["name"], seasons["pType"], seasons["startDate"], 
													seasons["endTime"], seasons["quantity"], seasons["log"], 1200);
				alert (res);
				console.write(res);
            }
        });
	alert('Contract Done')
		
	//call the contract
	// write to mongoDB
	var callRegisterNewSeason = {
               "async": true,
               "crossDomain": true,
               "url": "http://localhost:5000/api/v1/seasons/add",
               "method": "POST",
               "headers": {
                 "content-type": "application/json",
                 "authorization": "Basic VFNXYXJlaG91c2U6UGFzc3dvcmQxMjM=",
                 "cache-control": "no-cache",
               },
               "data": JSON.stringify(inputJSON)
             }

             $.ajax(callRegisterNewSeason).done(function (response) { 
			   alert(response);
             }); 
     
  });

//Register button in Register form is clicked to register a user
$("#register").click(function(){
  var name = $('#firstname').val()+$('#middlename').val()+$('#lastname').val();
  var aadhar = $("#aadharid").val();
  var address= $('#address').val();
  var contact = $('#contact').val();
  var password = $('#registerpassword').val();
  var user = $('#slectUser option:selected').val();
  switch(user){
    case "farmer":

    case "government":
    case "consumer":
    var registerUser = {
        "consumer" : {
          "name" : name,
          "aadhar" : aadhar,
          "user" : user,
          "password" : passowrd,
          "address" : address,
          "contact" : contact,
        }
    }
     var settings = {
               "async": true,
               "crossDomain": true,
               "url": "http://127.0.0.1:5000/api/v1/consumers/register",
               "method": "POST",
               "headers": {
                 "content-type": "application/json",
                 "authorization": "Basic VFNXYXJlaG91c2U6UGFzc3dvcmQxMjM=",
                 "cache-control": "no-cache",
               },
               "data": JSON.stringify(registerUser)
             }

             $.ajax(settings).done(function (response) {
               console.log(response);
               if (response.message == "SUCCESS"){
                 $('#signup').hide();
                 $('#login').show();
               }
             });

  } // End -- switch Case

});



}); //End -- Document ready funnction

/*
$(function() {
  var mapOptions = {
    zoom: 8,
    center: new google.maps.LatLng(-34.397, 150.644)
  };
  var map = new google.maps.Map($("#map")[0], mapOptions);

  // listen for the window resize event & trigger Google Maps to update too
  $(window).resize(function() {
    // (the 'map' here is the result of the created 'var map = ...' above)
    google.maps.event.trigger(map, "resize");
  });
});
*/
$(function(){
$('#navul li').click(function(){
  console.log(this);
  var section = $(this).find('a').attr('href');
  switch(section){
    case "#home" :
      $("#")
  }
})
});
